<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>TestableIO.System.IO.Abstractions.Wrappers</name>
    </assembly>
    <members>
        <member name="T:System.IO.Abstractions.DirectoryAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IDirectory" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.CreateDirectory(System.IO.Abstractions.IDirectory,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory and returns it, ensuring it is created with the specified directory security. If the directory already exists, the existing directory is returned.</summary><param name="directorySecurity">An object that determines the access control and audit security for the directory.</param><param name="path">The path of the directory to create.</param><exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> or <paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is empty.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Could not find a part of the path.</exception><exception cref="T:System.UnauthorizedAccessException">Access to the path is denied.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectory,System.String)">
            <summary>Returns the security information of a directory.</summary><returns>The security descriptors of all the access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectory,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a directory.</summary><returns>The security descriptors of all the access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.SetAccessControl(System.IO.Abstractions.IDirectory,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Changes the security attributes of an existing directory.</summary><param name="directorySecurity">The security information to apply to the directory.</param><exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryBase">
            <inheritdoc cref="T:System.IO.Directory" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.CreateDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Delete(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Delete(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Exists(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Exists(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory">
            <inheritdoc cref="M:System.IO.Directory.GetCurrentDirectory" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectoryRoot(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLogicalDrives">
            <inheritdoc cref="M:System.IO.Directory.GetLogicalDrives" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetParent(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetParent(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.Move(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetCurrentDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="T:System.IO.Abstractions.DirectoryInfoAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IDirectoryInfo" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.Create(System.IO.Abstractions.IDirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a new directory, ensuring it is created with the specified directory security. If the directory already exists, nothing is done.</summary><param name="directoryInfo">A directory that does not exist yet that will be created by the method.</param><param name="directorySecurity">The access control and audit security for the directory.</param><exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo" /> or <paramref name="directorySecurity" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Could not find a part of the path.</exception><exception cref="T:System.UnauthorizedAccessException">Access to the path is denied.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectoryInfo)">
            <summary>Returns the security information of a directory.</summary><param name="directoryInfo">The existing directory from which to obtain the security information.</param><returns>The security descriptors of all the access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectoryInfo,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a directory.</summary><param name="directoryInfo">An existing directory from which to obtain the security information.</param><param name="includeSections">The desired access control sections to retrieve.</param><returns>The security descriptors of the specified access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.SetAccessControl(System.IO.Abstractions.IDirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>Changes the security attributes of an existing directory.</summary><param name="directoryInfo">An existing directory.</param><param name="directorySecurity">The security information to apply to the directory.</param><exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryInfoBase">
            <inheritdoc cref="T:System.IO.DirectoryInfo" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.Create">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Create" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.CreateSubdirectory(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.Delete(System.Boolean)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Delete(System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateDirectories" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.MoveTo(System.String)" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoBase.Parent">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Parent" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoBase.Root">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Root" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.op_Implicit(System.IO.DirectoryInfo)~System.IO.Abstractions.DirectoryInfoBase">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.DirectoryInfoWrapper">
            <inheritdoc cref="T:System.IO.DirectoryInfo" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Delete">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Delete" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Refresh">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Refresh" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Attributes">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Attributes" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.CreationTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTime" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.CreationTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Exists">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Exists" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastAccessTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTime" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastAccessTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastWriteTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastWriteTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Name">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Name" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Create">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Create" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.CreateSubdirectory(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Delete(System.Boolean)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.Delete(System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateDirectories" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.DirectoryInfo.MoveTo(System.String)" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Parent">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Parent" />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Root">
            <inheritdoc cref="P:System.IO.DirectoryInfo.Root" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryWrapper">
            <inheritdoc cref="T:System.IO.Directory" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.CreateDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.CreateDirectory(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Delete(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Delete(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.Directory.Delete(System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Exists(System.String)">
            <inheritdoc cref="M:System.IO.Directory.Exists(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCurrentDirectory">
            <inheritdoc cref="M:System.IO.Directory.GetCurrentDirectory" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectoryRoot(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetDirectoryRoot(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLogicalDrives">
            <inheritdoc cref="M:System.IO.Directory.GetLogicalDrives" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetParent(System.String)">
            <inheritdoc cref="M:System.IO.Directory.GetParent(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.Move(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCurrentDirectory(System.String)">
            <inheritdoc cref="M:System.IO.Directory.SetCurrentDirectory(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)" />
        </member>
        <member name="T:System.IO.Abstractions.DriveInfoBase">
            <inheritdoc cref="T:System.IO.DriveInfo" />
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.AvailableFreeSpace">
            <inheritdoc cref="P:System.IO.DriveInfo.AvailableFreeSpace" />
            <summary>
            Gets or sets the amount of available free space on a drive, in bytes.
            </summary>
            <value>The amount of free space available on the drive, in bytes.</value>
            <remarks>
            This property indicates the amount of free space available on the drive.
            Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.DriveFormat">
            <inheritdoc cref="P:System.IO.DriveInfo.DriveFormat" />
            <summary>
            Gets or sets the name of the file system, such as NTFS or FAT32.
            </summary>
            <remarks>
            Use DriveFormat to determine what formatting a drive uses.
            </remarks>
            <value>The name of the file system on the specified drive.</value>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.DriveType">
            <inheritdoc cref="P:System.IO.DriveInfo.DriveType" />
            <summary>
            Gets or sets the drive type, such as CD-ROM, removable, network, or fixed.
            </summary>
            <value>One of the enumeration values that specifies a drive type.</value>
            <remarks>
            The DriveType property indicates whether a drive is one of the following: CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, or Unknown.
            These values are described in the DriveType enumeration.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.IsReady">
            <inheritdoc cref="P:System.IO.DriveInfo.IsReady" />
            <summary>
            Gets or sets a value indicating whether a drive is ready.
            </summary>
            <value>
            <see langword="true" /> if the drive is ready; <see langword="false" /> if the drive is not ready.
            </value>
            <remarks>
            IsReady indicates whether a drive is ready.
            For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations.
            If you do not test whether a drive is ready, and it is not ready, querying the drive using <see cref="T:System.IO.Abstractions.DriveInfoBase" /> will raise an IOException.
            Do not rely on IsReady to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and <see cref="P:System.IO.Abstractions.DriveInfoBase.DriveFormat" />.
            Between the time that your code checks IsReady and then accesses one of the other properties (even if the access occurs immediately after the check),
             a drive may have been disconnected or a disk may have been removed.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.Name">
            <inheritdoc cref="P:System.IO.DriveInfo.Name" />
            <summary>
            Gets or sets the name of a drive, such as C:\.
            </summary>
            <value>The name of the drive.</value>
            <remarks>
            This property is the name assigned to the drive, such as C:\ or E:\.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.RootDirectory">
            <inheritdoc cref="P:System.IO.DriveInfo.RootDirectory" />
            <summary>
            Gets or sets the root directory of a drive.
            </summary>
            <value>An object that contains the root directory of the drive.</value>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.TotalFreeSpace">
            <inheritdoc cref="P:System.IO.DriveInfo.TotalFreeSpace" />
            <summary>
            Gets or sets the total amount of free space available on a drive, in bytes.
            </summary>
            <value>The total free space available on a drive, in bytes.</value>
            <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.TotalSize">
            <inheritdoc cref="P:System.IO.DriveInfo.TotalSize" />
            <summary>
            Gets or sets the total size of storage space on a drive, in bytes.
            </summary>
            <value>The total size of the drive, in bytes.</value>
            <remarks>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.VolumeLabel">
            <inheritdoc cref="P:System.IO.DriveInfo.VolumeLabel" />
            <summary>
            Gets or sets the volume label of a drive.
            </summary>
            <value>The volume label.</value>
            <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that <see langword="null" /> is a valid VolumeLabel.
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Thrown if the volume label is being set on a network or CD-ROM drive
            -or-
            Access to the drive information is denied.
            </exception>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoBase.op_Implicit(System.IO.DriveInfo)~System.IO.Abstractions.DriveInfoBase">
            <summary>
            Converts a <see cref="T:System.IO.DriveInfo" /> into a <see cref="T:System.IO.Abstractions.DriveInfoBase" />.
            </summary>
            <param name="driveInfo">The drive info to be converted.</param>
        </member>
        <member name="T:System.IO.Abstractions.DriveInfoWrapper">
            <summary>
            The wrapper for a <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.DriveInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.DriveInfoWrapper" /> class, which acts as a wrapper for a drive info.
            </summary>
            <param name="fileSystem">The underlying IFileSystem.</param>
            <param name="instance">The drive info.</param>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.Name">
            <summary>
            Gets or sets the name of a drive, such as C:\.
            </summary>
            <value>The name of the drive.</value>
            <remarks>
            This property is the name assigned to the drive, such as C:\ or E:\.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.DriveType">
            <summary>
            Gets or sets the drive type, such as CD-ROM, removable, network, or fixed.
            </summary>
            <value>One of the enumeration values that specifies a drive type.</value>
            <remarks>
            The DriveType property indicates whether a drive is one of the following: CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, or Unknown.
            These values are described in the DriveType enumeration.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.DriveFormat">
            <summary>
            Gets or sets the name of the file system, such as NTFS or FAT32.
            </summary>
            <remarks>
            Use DriveFormat to determine what formatting a drive uses.
            </remarks>
            <value>The name of the file system on the specified drive.</value>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.IsReady">
            <summary>
            Gets or sets a value indicating whether a drive is ready.
            </summary>
            <value>
            <see langword="true" /> if the drive is ready; <see langword="false" /> if the drive is not ready.
            </value>
            <remarks>
            IsReady indicates whether a drive is ready.
            For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations.
            If you do not test whether a drive is ready, and it is not ready, querying the drive using <see cref="T:System.IO.Abstractions.DriveInfoBase" /> will raise an IOException.
            Do not rely on IsReady to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and <see cref="P:System.IO.Abstractions.DriveInfoBase.DriveFormat" />.
            Between the time that your code checks IsReady and then accesses one of the other properties (even if the access occurs immediately after the check),
             a drive may have been disconnected or a disk may have been removed.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.AvailableFreeSpace">
            <summary>
            Gets or sets the amount of available free space on a drive, in bytes.
            </summary>
            <value>The amount of free space available on the drive, in bytes.</value>
            <remarks>
            This property indicates the amount of free space available on the drive.
            Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.TotalFreeSpace">
            <summary>
            Gets or sets the total amount of free space available on a drive, in bytes.
            </summary>
            <value>The total free space available on a drive, in bytes.</value>
            <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.TotalSize">
            <summary>
            Gets or sets the total size of storage space on a drive, in bytes.
            </summary>
            <value>The total size of the drive, in bytes.</value>
            <remarks>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.RootDirectory">
            <summary>
            Gets or sets the root directory of a drive.
            </summary>
            <value>An object that contains the root directory of the drive.</value>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.VolumeLabel">
            <summary>
            Gets or sets the volume label of a drive.
            </summary>
            <value>The volume label.</value>
            <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that <see langword="null" /> is a valid VolumeLabel.
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Thrown if the volume label is being set on a network or CD-ROM drive
            -or-
            Access to the drive information is denied.
            </exception>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoWrapper.ToString">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.FileAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IFile" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileAclExtensions.GetAccessControl(System.IO.Abstractions.IFile,System.String)">
            <summary>Returns the security information of a file.</summary><returns>The security descriptors of all the access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileAclExtensions.GetAccessControl(System.IO.Abstractions.IFile,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a file.</summary><param name="includeSections">The desired access control sections to retrieve from the file.</param><returns>The security descriptors of the specified access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileAclExtensions.SetAccessControl(System.IO.Abstractions.IFile,System.String,System.Security.AccessControl.FileSecurity)">
            <summary>Changes the security attributes of an existing file.</summary><param name="fileSecurity">The security information to apply to the file.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileSecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileBase">
            <inheritdoc cref="T:System.IO.File" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.#ctor(System.IO.Abstractions.IFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.FileBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendText(System.String)">
            <inheritdoc cref="M:System.IO.File.AppendText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Copy(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Copy(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Create(System.String)">
            <inheritdoc cref="M:System.IO.File.Create(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Create(System.String,System.Int32)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Create(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.CreateText(System.String)">
            <inheritdoc cref="M:System.IO.File.CreateText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Decrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Decrypt(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Delete(System.String)">
            <inheritdoc cref="M:System.IO.File.Delete(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Encrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Encrypt(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Exists(System.String)">
            <inheritdoc cref="M:System.IO.File.Exists(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetAttributes(System.String)">
            <inheritdoc cref="M:System.IO.File.GetAttributes(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.OpenRead(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenRead(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.OpenText(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.OpenWrite(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenWrite(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllBytes(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytes(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Replace(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Replace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc cref="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllBytes(System.String,System.Byte[])">
            <inheritdoc cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[])">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[])" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.String[],System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="T:System.IO.Abstractions.FileInfoAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IFileInfo" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IFileInfo)">
            <summary>Returns the security information of a file.</summary><param name="fileInfo">The file from which to obtain the security information.</param><returns>The security descriptors of all the access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IFileInfo,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a file.</summary><param name="fileInfo">An existing file from which to obtain the security information.</param><param name="includeSections">The desired access control sections to retrieve from the file.</param><returns>The security descriptors of the specified access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoAclExtensions.SetAccessControl(System.IO.Abstractions.IFileInfo,System.Security.AccessControl.FileSecurity)">
            <summary>Changes the security attributes of an existing file.</summary><param name="fileInfo">An existing file.</param><param name="fileSecurity">The security information to apply to the file.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileSecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileInfoBase">
            <inheritdoc cref="T:System.IO.FileInfo" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.AppendText">
            <inheritdoc cref="M:System.IO.FileInfo.AppendText" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.CopyTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.CopyTo(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Create">
            <inheritdoc cref="M:System.IO.FileInfo.Create" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.CreateText">
            <inheritdoc cref="M:System.IO.FileInfo.CreateText" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Decrypt">
            <inheritdoc cref="M:System.IO.FileInfo.Decrypt" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Encrypt">
            <inheritdoc cref="M:System.IO.FileInfo.Encrypt" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.MoveTo(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.OpenRead">
            <inheritdoc cref="M:System.IO.FileInfo.OpenRead" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.OpenText">
            <inheritdoc cref="M:System.IO.FileInfo.OpenText" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.OpenWrite">
            <inheritdoc cref="M:System.IO.FileInfo.OpenWrite" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Replace(System.String,System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.Replace(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Replace(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.Replace(System.String,System.String,System.Boolean)" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.Directory">
            <inheritdoc cref="P:System.IO.FileInfo.Directory" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.DirectoryName">
            <inheritdoc cref="P:System.IO.FileInfo.DirectoryName" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.IsReadOnly">
            <inheritdoc cref="P:System.IO.FileInfo.IsReadOnly" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.Length">
            <inheritdoc cref="P:System.IO.FileInfo.Length" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.op_Implicit(System.IO.FileInfo)~System.IO.Abstractions.FileInfoBase">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.FileInfoWrapper">
            <inheritdoc cref="T:System.IO.FileInfo" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Delete">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Delete" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Refresh">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Refresh" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Attributes">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Attributes" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.CreationTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTime" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.CreationTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Exists">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Exists" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastAccessTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTime" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastAccessTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastWriteTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastWriteTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Name">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Name" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.AppendText">
            <inheritdoc cref="M:System.IO.FileInfo.AppendText" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CopyTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CopyTo(System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Create">
            <inheritdoc cref="M:System.IO.FileInfo.Create" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CreateText">
            <inheritdoc cref="M:System.IO.FileInfo.CreateText" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Decrypt">
            <inheritdoc cref="M:System.IO.FileInfo.Decrypt" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Encrypt">
            <inheritdoc cref="M:System.IO.FileInfo.Encrypt" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.MoveTo(System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.MoveTo(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenRead">
            <inheritdoc cref="M:System.IO.FileInfo.OpenRead" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenText">
            <inheritdoc cref="M:System.IO.FileInfo.OpenText" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenWrite">
            <inheritdoc cref="M:System.IO.FileInfo.OpenWrite" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Replace(System.String,System.String)">
            <inheritdoc cref="M:System.IO.FileInfo.Replace(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Replace(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.FileInfo.Replace(System.String,System.String,System.Boolean)" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Directory">
            <inheritdoc cref="P:System.IO.FileInfo.Directory" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.DirectoryName">
            <inheritdoc cref="P:System.IO.FileInfo.DirectoryName" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.IsReadOnly">
            <inheritdoc cref="P:System.IO.FileInfo.IsReadOnly" />
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Length">
            <inheritdoc cref="P:System.IO.FileInfo.Length" />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.ToString">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileStreamAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.FileSystemStream" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileStreamAclExtensions.GetAccessControl(System.IO.Abstractions.FileSystemStream)">
            <summary>Returns the security information of a file.</summary><param name="fileStream">An existing file from which to obtain the security information.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileStream" /> is <see langword="null" />.</exception><exception cref="T:System.ObjectDisposedException">The file stream is closed.</exception><returns>The security descriptors of all the access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileStreamAclExtensions.SetAccessControl(System.IO.Abstractions.FileSystemStream,System.Security.AccessControl.FileSecurity)">
            <summary>Changes the security attributes of an existing file.</summary><param name="fileStream">An existing file.</param><param name="fileSecurity">The security information to apply to the file.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileStream" /> or <paramref name="fileSecurity" /> is <see langword="null" />.</exception><exception cref="T:System.ObjectDisposedException">The file stream is closed.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileSystem">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystem.#ctor">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.Directory">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.Directory" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.File">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.File" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.FileInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.FileStream">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.Path">
            <summary>
            Abstraction for static methods and properties in <see cref="T:System.IO.Path" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.DirectoryInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.DriveInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.FileSystemWatcher">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemBase">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.Directory">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.Directory" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.File">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.File" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.FileInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.FileStream">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.Path">
            <summary>
            Abstraction for static methods and properties in <see cref="T:System.IO.Path" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.DirectoryInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.DriveInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.FileSystemWatcher">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemInfoBase">
            <inheritdoc cref="T:System.IO.FileSystemInfo" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.Delete">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Delete" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.Refresh">
            <inheritdoc cref="M:System.IO.FileSystemInfo.Refresh" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Attributes">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Attributes" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.CreationTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTime" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.CreationTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.CreationTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Exists">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Exists" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Extension">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Extension" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.FullName">
            <inheritdoc cref="P:System.IO.FileSystemInfo.FullName" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastAccessTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTime" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastAccessTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastAccessTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastWriteTime">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTime" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastWriteTimeUtc">
            <inheritdoc cref="P:System.IO.FileSystemInfo.LastWriteTimeUtc" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Name">
            <inheritdoc cref="P:System.IO.FileSystemInfo.Name" />
        </member>
        <member name="T:System.IO.Abstractions.FileSystemWatcherBase">
            <inheritdoc cref="T:System.IO.FileSystemWatcher" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.IncludeSubdirectories">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Container">
            <inheritdoc cref="T:System.ComponentModel.Container" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.EnableRaisingEvents">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Filter">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.Filter" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.InternalBufferSize">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.NotifyFilter">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Path">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.Path" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Site">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.Site" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.SynchronizingObject">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Changed">
            <inheritdoc cref="E:System.IO.FileSystemWatcher.Changed" />
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Created">
            <inheritdoc cref="E:System.IO.FileSystemWatcher.Created" />
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Deleted">
            <inheritdoc cref="E:System.IO.FileSystemWatcher.Deleted" />
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Error">
            <inheritdoc cref="E:System.IO.FileSystemWatcher.Error" />
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Renamed">
            <inheritdoc cref="E:System.IO.FileSystemWatcher.Renamed" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.BeginInit">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.BeginInit" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.EndInit">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.EndInit" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.WaitForChanged(System.IO.WatcherChangeTypes)">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.op_Implicit(System.IO.FileSystemWatcher)~System.IO.Abstractions.FileSystemWatcherBase">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnCreated(System.Object,System.IO.FileSystemEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnError(System.Object,System.IO.ErrorEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.FileSystemWatcherFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.#ctor(System.IO.Abstractions.IFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.CreateNew">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><returns></returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.CreateNew(System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param><returns></returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.CreateNew(System.String,System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param><param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param><returns></returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.New">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.New(System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.New(System.String,System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param><param name="filter">
            The type of files to watch.
            For example, <c>"*.txt"</c> watches for changes to all text files.
            </param>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.Wrap(System.IO.FileSystemWatcher)">
            <summary>
            Wraps the <paramref name="fileSystemWatcher" /> to the testable interface <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemWatcherWrapper">
            <inheritdoc cref="T:System.IO.FileSystemWatcher" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.FileSystemWatcher)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.IncludeSubdirectories">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.IncludeSubdirectories" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Container">
            <inheritdoc cref="T:System.ComponentModel.Container" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.EnableRaisingEvents">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.EnableRaisingEvents" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Filter">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.Filter" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.InternalBufferSize">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.InternalBufferSize" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.NotifyFilter">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.NotifyFilter" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Path">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.Path" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Site">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.Site" />
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.SynchronizingObject">
            <inheritdoc cref="P:System.IO.FileSystemWatcher.SynchronizingObject" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.BeginInit">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.BeginInit" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.EndInit">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.EndInit" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.WaitForChanged(System.IO.WatcherChangeTypes)">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <inheritdoc cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)" />
        </member>
        <member name="T:System.IO.Abstractions.FileWrapper">
            <inheritdoc cref="T:System.IO.File" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllText(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendText(System.String)">
            <inheritdoc cref="M:System.IO.File.AppendText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Copy(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Copy(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String)">
            <inheritdoc cref="M:System.IO.File.Create(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String,System.Int32)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.CreateText(System.String)">
            <inheritdoc cref="M:System.IO.File.CreateText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Decrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Decrypt(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Delete(System.String)">
            <inheritdoc cref="M:System.IO.File.Delete(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Encrypt(System.String)">
            <inheritdoc cref="M:System.IO.File.Encrypt(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Exists(System.String)">
            <inheritdoc cref="M:System.IO.File.Exists(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetAttributes(System.String)">
            <inheritdoc cref="M:System.IO.File.GetAttributes(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetCreationTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetCreationTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastAccessTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastAccessTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastWriteTime(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTime(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastWriteTimeUtc(System.String)">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Move(System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc cref="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.OpenRead(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenRead(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.OpenText(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.OpenWrite(System.String)">
            <inheritdoc cref="M:System.IO.File.OpenWrite(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllBytes(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytes(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadLines(System.String)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadLines(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Replace(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Replace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc cref="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetCreationTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetCreationTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastAccessTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastAccessTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastWriteTime(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTime(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <inheritdoc cref="M:System.IO.File.SetLastWriteTimeUtc(System.String,System.DateTime)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file. </param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                You can use this method to create the contents for a collection class that takes an <see cref="T:System.Collections.Generic.IEnumerable`1" /> in its constructor, such as a <see cref="T:System.Collections.Generic.List`1" />, <see cref="T:System.Collections.Generic.HashSet`1" />, or a <see cref="T:System.Collections.Generic.SortedSet`1" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                You can use this method to create a file that contains the following:
            <list type="bullet">
            <item>
            <description>The results of a LINQ to Objects query on the lines of a file, as obtained by using the ReadLines method.</description>
            </item>
            <item>
            <description>The contents of a collection that implements an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of strings.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)" /> method overload with <see cref="T:System.Text.UTF8Encoding" /> encoding.
            </para>
            <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding" /> object that represents the character encoding applied to the string array.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <see cref="M:Encoding.GetPreamble" /> method will return an empty byte array.
            If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)" /> method overload with <see cref="T:System.Text.UTF8Encoding" /> encoding.
            <para>
            Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file.
            The file handle is guaranteed to be closed by this method, even if exceptions are raised.
            </remarks>
        </member>
        <member name="T:System.IO.Abstractions.PathBase">
            <inheritdoc cref="T:System.IO.Path" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.PathBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.PathBase.AltDirectorySeparatorChar">
            <inheritdoc cref="F:System.IO.Path.AltDirectorySeparatorChar" />
        </member>
        <member name="P:System.IO.Abstractions.PathBase.DirectorySeparatorChar">
            <inheritdoc cref="F:System.IO.Path.DirectorySeparatorChar" />
        </member>
        <member name="P:System.IO.Abstractions.PathBase.InvalidPathChars">
            <inheritdoc cref="F:System.IO.Path.InvalidPathChars" />
        </member>
        <member name="P:System.IO.Abstractions.PathBase.PathSeparator">
            <inheritdoc cref="F:System.IO.Path.PathSeparator" />
        </member>
        <member name="P:System.IO.Abstractions.PathBase.VolumeSeparatorChar">
            <inheritdoc cref="F:System.IO.Path.VolumeSeparatorChar" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.ChangeExtension(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String[])">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String[])" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetDirectoryName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetExtension(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFileName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileName(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFileNameWithoutExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFullPath(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFullPath(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetInvalidFileNameChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidFileNameChars" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetInvalidPathChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidPathChars" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetPathRoot(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetPathRoot(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetRandomFileName">
            <inheritdoc cref="M:System.IO.Path.GetRandomFileName" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetTempFileName">
            <inheritdoc cref="M:System.IO.Path.GetTempFileName" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetTempPath">
            <inheritdoc cref="M:System.IO.Path.GetTempPath" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.HasExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.HasExtension(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathBase.IsPathRooted(System.String)">
            <inheritdoc cref="M:System.IO.Path.IsPathRooted(System.String)" />
        </member>
        <member name="T:System.IO.Abstractions.PathWrapper">
            <inheritdoc cref="T:System.IO.Path" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.AltDirectorySeparatorChar">
            <inheritdoc cref="F:System.IO.Path.AltDirectorySeparatorChar" />
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.DirectorySeparatorChar">
            <inheritdoc cref="F:System.IO.Path.DirectorySeparatorChar" />
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.InvalidPathChars">
            <inheritdoc cref="F:System.IO.Path.InvalidPathChars" />
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.PathSeparator">
            <inheritdoc cref="F:System.IO.Path.PathSeparator" />
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.VolumeSeparatorChar">
            <inheritdoc cref="F:System.IO.Path.VolumeSeparatorChar" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.ChangeExtension(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.ChangeExtension(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String[])">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String[])" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetDirectoryName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetDirectoryName(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetExtension(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFileName(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileName(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFileNameWithoutExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFullPath(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetFullPath(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetInvalidFileNameChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidFileNameChars" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetInvalidPathChars">
            <inheritdoc cref="M:System.IO.Path.GetInvalidPathChars" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetPathRoot(System.String)">
            <inheritdoc cref="M:System.IO.Path.GetPathRoot(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetRandomFileName">
            <inheritdoc cref="M:System.IO.Path.GetRandomFileName" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetTempFileName">
            <inheritdoc cref="M:System.IO.Path.GetTempFileName" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetTempPath">
            <inheritdoc cref="M:System.IO.Path.GetTempPath" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.HasExtension(System.String)">
            <inheritdoc cref="M:System.IO.Path.HasExtension(System.String)" />
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.IsPathRooted(System.String)">
            <inheritdoc cref="M:System.IO.Path.IsPathRooted(System.String)" />
        </member>
    </members>
</doc>
